{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"du",
				"dumps\tfunction"
			],
			[
				"__",
				"__num"
			],
			[
				"ree",
				"response"
			]
		]
	},
	"buffers":
	[
		{
			"file": "operation_excle.txt",
			"settings":
			{
				"buffer_size": 1643,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/24831/Desktop/TXT/测试内容及问题/货鼠岱嘀小程序12.17.txt",
			"settings":
			{
				"buffer_size": 566,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "货鼠岱嘀小程序："
			}
		},
		{
			"contents": "袋鼠打车下单：\n\n{\"allPackages\":\"4\",\"allVolume\":\"2\",\"allWeight\":\"3\",\"businessNo\":\"BSTE11\",\"city\":\"佛山市\",\"cityNo\":\"440600\",\"consigneeAddress\":\"哦哦哦哦哦\",\"consigneeName\":\"阿测试\",\"consigneePhone\":\"18883612485\",\"deliveryAddress\":\"办法\",\"deliveryCity\":\"北京市\",\"deliveryCityNo\":\"110100\",\"deliveryDistrict\":\"东城区\",\"deliveryDistrictNo\":\"110101\",\"deliveryMemo\":\"\",\"isArriva\":\"1\",\"deliveryName\":\"测试\",\"deliveryPhone\":\"18599937985\",\"deliveryProvince\":\"北京\",\"deliveryProvinceNo\":\"110000\",\"district\":\"禅城区\",\"districtNo\":\"440604\",\"floor\":\"\",\"goods\":[],\"isElevator\":\"1\",\"memo\":\"jjledde\",\"orderWay\":\"3\",\"wokerPrice\":12877.51,\"predictServiceDateCode\":\"ch_forenoon\",\"predictServiceDate\":\"2018-12-25\",\"province\":\"广东省\",\"provinceNo\":\"440000\",\"serviceNo\":\"FHB13,FHB14\",\"verfiyType\":\"\",\"verifyOrderNo\":\"  \",\"placeOrderSource\":\"wechat\"}\n\n直营下单： 18599937985\n{\"warehouseId\":\"1d8a79b7-3b10-4643-9b0a-cd5e34992c0a\",\"productParameterList\":[{\"productId\":\"2\",\"num\":1,\"roomArea\":\"1\",\"packNum\":22,\"installFee\":\"1\",\"memo\":\"11\",\"middleClassNo\":\"FHB01005\",\"bigClassNo\":\"FHB01\"}],\"storageType\":\"CARGOSOURCETYPE02\",\"cargoOwnerId\":\"1\",\"serviceList\":[\"ZpsServiceType01\"],\"consigneName\":\"测试\",\"consignePhone\":\"18883612485\",\"floor\":\"2\",\"consigneMemo\":\"32\",\"consigneAddress\":\"23\",\"outNo\":\"\",\"outSourceWarehouse\":\"\",\"memo\":\"323\",\"productType\":1,\"elevator\":0,\"costList\":[{\"costName\":\"配送费\",\"code\":\"f-03\",\"serviceNo\":\"ZpsServiceType01\",\"money\":\"2\",\"clearingObject\":\"1\"}],\"chServiceCollectionCostList\":[{\"costNo\":\"CHCOLLECTIONFEE03\",\"money\":\"0.01\"},{\"costNo\":\"CHCOLLECTIONFEE01\",\"money\":\"0.01\"}],\"appointTime\":\"\",\"appointTimePart\":\"\",\"verifityNoList\":[],\"verifitySource\":\"\",\"isStorage\":1,\"allVolume\":\"1\",\"businessNo\":\"BSTE02\",\"cargoPrice\":\"2\",\"pickOrderMoney\":\"2\",\"allWeight\":\"1\",\"orderSourceNo\":\"32\",\"consigneProvinceNo\":\"130000\",\"consigneCityNo\":\"130200\",\"consigneDistrictNo\":\"130203\"}\n\n直营下单：15023621999\n\n{\"warehouseId\":\"00536203-c242-4145-8f1e-e8a6f0a7ec11\",\"productParameterList\":[{\"productId\":\"eeee27a0-fadf-49d7-b32a-b6f46fa1c6cf\",\"num\":1,\"roomArea\":\"1\",\"packNum\":4,\"installFee\":\"1\",\"memo\":\"1\",\"middleClassNo\":\"FHB01005\",\"bigClassNo\":\"FHB01\"}],\"storageType\":\"CARGOSOURCETYPE02\",\"cargoOwnerId\":\"0c6fa561-ffb3-438f-8758-1c09b662fe05\",\"serviceList\":[\"ZpsServiceType01\",\"ZpsServiceType02\"],\"consigneName\":\"测试\",\"consignePhone\":\"18883612485\",\"floor\":\"22\",\"consigneMemo\":\"4324\",\"consigneAddress\":\"432432\",\"outNo\":\"\",\"outSourceWarehouse\":\"\",\"memo\":\"3\",\"productType\":1,\"elevator\":0,\"costList\":[{\"costName\":\"配送费\",\"code\":\"f-03\",\"serviceNo\":\"ZpsServiceType01\",\"money\":\"2\",\"clearingObject\":\"0c6fa561-ffb3-438f-8758-1c09b662fe05\"},{\"costName\":\"安装费\",\"code\":\"f-04\",\"serviceNo\":\"ZpsServiceType02\",\"money\":\"2\",\"clearingObject\":\"0c6fa561-ffb3-438f-8758-1c09b662fe05\"}],\"chServiceCollectionCostList\":[{\"costNo\":\"CHCOLLECTIONFEE03\",\"money\":\"0.01\",\"memo\":\"2\"},{\"costNo\":\"CHCOLLECTIONFEE01\",\"money\":\"0.01\",\"memo\":\"32\"}],\"appointTime\":\"\",\"appointTimePart\":\"\",\"verifityNoList\":[],\"verifitySource\":\"\",\"isStorage\":1,\"allVolume\":\"2\",\"businessNo\":\"BSTE02\",\"cargoPrice\":\"3\",\"pickOrderMoney\":\"2\",\"allWeight\":\"2\",\"orderSourceNo\":\"2\",\"consigneProvinceNo\":\"500000\",\"consigneCityNo\":\"500100\",\"consigneDistrictNo\":\"500101\"}",
			"settings":
			{
				"buffer_size": 3121,
				"line_ending": "Windows",
				"name": "袋鼠打车下单："
			}
		},
		{
			"contents": "from base.runmethod import RunMethod\nfrom operation_data.get_data import GetData\nfrom tool.common_util import CommonUtil\nfrom operation_data.dependent import DependentData\nfrom tool.send_email import SendEmail\nfrom tool.operation_testReport_excle import Write_testReport_excle\nimport os\n\n\nclass RunTest:\n    def __init__(self):\n        # self.ope=OperationExcle()\n        self.run_method = RunMethod()\n        self.data = GetData()\n        self.com_util = CommonUtil()\n        self.send_mail = SendEmail()\n        self.op_testReport = Write_testReport_excle()\n\n    # 程序执行\n    def go_on_run(self):\n        global pass_count, fail_count\n        res = None\n        pass_count = []\n        fail_count = []\n        rows_count = self.data.get_case_line()\n        # print(rows_count)\n        for i in range(1, rows_count):\n            is_run = self.data.get_is_run(i)\n            # print(is_run)\n            url = self.data.get_url(i)\n            # print(url)\n            method = self.data.get_request_method(i)\n            request_data = self.data.request_data_type_change(i)\n            # print(request_data)\n            expect = self.data.get_expect_data(i)\n            # print(expect)\n            header = self.data.is_header(i)\n            select_str = 'select'\n            insert_str = 'INSERT'\n            update_str = 'UPDATE'\n            delete_str = 'DELETE'\n            for except_num in select_str, insert_str, update_str, delete_str:\n                except_str = self.com_util.is_contain(except_num, expect)\n                if except_str is True:\n                    expect = self.data.get_sql_expect_data(i)\n                else:\n                    expect = self.data.get_expect_data(i)\n            # print(expect)\n\n            if is_run is True:\n                res = self.run_method.run_main(\n                    method, url, request_data, header)\n                if except_str is False:\n                    if self.com_util.is_contain(expect, res) == True:\n                        self.data.write_result(i, 'pass')\n                        print(\"测试通过\")\n                        pass_count.append(i)\n                    else:\n                        self.data.write_result(i, 'Filed')\n                        print('测试失败')\n                        fail_count.append(i)\n                # print(res)\n\n                if except_str is True:\n                    if self.com_util.is_equal_dict(expect, res) == True:  # 判断字典是否相等\n                        self.data.write_result(i, 'pass')\n                        pass_count.append(i)\n                        print('测试通过')\n                    else:\n                        self.data.write_result(i, res)\n                        print('测试失败')\n                        fail_count.append(i)\n\n            else:\n                pass\n            print(res)\n            # print(self.com_util.is_contain(expect,res)==True)\n\n    # 发送邮件、生成测试报告\n    def create_test_report(self):\n        self.op_testReport.write_TestReport(pass_count, fail_count)  # 生成excel表格测试报告\n        self.op_testReport.excle_to_html()  # 将测试报告转换为html输出\n        self.send_mail.send_main(pass_count, fail_count)  # 发送测试报告邮件\n\n\nif __name__ == '__main__':\n    run = RunTest()\n    run.go_on_run()\n    run.create_test_report()\n\n    # now=time.strftime(\"%Y-%m-%d %H-%M-%S\") #获取当前时间\n    # file_path='../report/'+now+'result.html'\n    # fp=open(file_path,'wb')\n    # runner=HTMLTestRunner.HTMLTestRunner(stream=fp, title='Testresult')  # 定义运行方法（定义变量与unittest结合）\n    # fp.close()\n",
			"file": "main/run_test.py",
			"file_size": 3746,
			"file_write_time": 131909540773451625,
			"settings":
			{
				"buffer_size": 3479,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"",
				"Robot Framework: Create Database"
			],
			[
				" install Package",
				"Package Control: Install Package"
			],
			[
				"Install Package",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"python "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Interfacetest_diy/interfaceTest"
	],
	"file_history":
	[
		"/E/Interfacetest_diy/interfaceTest/interfaceTest.sublime-project",
		"/E/Sublime Text Build 3176 x64/Data/Packages/User/python3.6.5.sublime-build",
		"/E/Sublime Text Build 3176 x64/Data/Packages/Anaconda/Anaconda.sublime-settings",
		"/E/Sublime Text Build 3176 x64/Data/Packages/User/Anaconda.sublime-settings",
		"/E/Interfacetest_diy/interfaceTest/main/run_test.py",
		"/E/Interfacetest_diy/interfaceTest/main/__init__.py",
		"/E/Sublime Text Build 3176 x64/Data/Packages/python/Completion Rules.tmPreferences",
		"/E/test/moudle/test_excle_daoru.py",
		"/C/Users/24831/Desktop/jmeter bingfa/jmx/18-11.9测试.jmx",
		"/C/Users/24831/Desktop/TXT/测试内容及问题/七牛云.txt",
		"/E/python-LX/re(正则).py",
		"/E/python-LX/私有化12.26.py",
		"/C/Users/24831/Desktop/TXT/测试内容及问题/jmeter控制器：",
		"/C/Users/24831/Desktop/测试内容及问题/发货宝-录单：业务类型-服务类型all",
		"/C/Users/24831/Desktop/TXT/测试内容及问题/Testing Server 部署说明.txt",
		"/E/Interfacetest_diy/interfaceTest/tool/Mysql_connect.py",
		"/C/Users/24831/.ssh/config",
		"/E/Interfacetest_diy/interfaceTest/.gitignore",
		"/C/Users/24831/Desktop/测试内容及问题/七牛云.txt",
		"/C/Users/24831/Desktop/测试内容及问题/Testing Server 部署说明.txt",
		"/C/Users/24831/Desktop/测试内容及问题/待办事项：",
		"/C/Users/24831/Desktop/接口测试/发货宝+居家小二app12.11 - 副本.jmx",
		"/C/Users/24831/Desktop/接口测试/运营后台12.11 - 副本.jmx",
		"/C/Users/24831/Desktop/接口测试/WTOMS接口性能测试12.11 - 副本.jmx",
		"/C/Users/24831/Desktop/测试内容及问题/博客园美化",
		"/C/Users/24831/Desktop/测试内容及问题/订单合并-10.9",
		"/C/Users/24831/Desktop/测试内容及问题/编辑视频链接文本",
		"/E/SaaSFlowTest/Common/system_login.py",
		"/E/sql备份/INSERT INTO `athena`.`core_save_message_template`（消息推送模板）-18.12.1",
		"/D/SaaSFlowTest/InterFaceFlowTest/.gitignore",
		"/C/Users/24831/.ssh/id_rsa_SaaSFlowTest.pub",
		"/C/Windows/System32/drivers/etc/hosts",
		"/C/Windows/System32/drivers/etc/host",
		"/E/SaaSFlowTest/.gitignore",
		"/C/Users/24831/Desktop/测试内容及问题/居家小二商家端icon.gitconfig",
		"/C/Users/24831/Downloads/个推测试-安卓（推送key配置）.txt",
		"/C/Users/24831/Desktop/postman快捷录单（正常单）/直营/用户自提.txt",
		"/C/Users/24831/Desktop/postman快捷录单（正常单）/直营/二级中转.txt",
		"/C/Users/24831/.ssh/id_rsa_TestFlow.pub",
		"/E/host",
		"/D/SaaSFlowTest/.gitignore",
		"/C/Users/24831/.ssh/known_hosts",
		"/C/Users/24831/.ssh/id_rsa_InterFaceTestFlow.pub",
		"/C/Users/24831/.ssh/id_rsa.pub",
		"/C/Users/24831/.ssh/id_rsa",
		"/D/SaaSFlowTest/.git/config",
		"/E/test/moudle/博客园定制模板/博客园定制模板",
		"/E/test/moudle/interface_bingfaTest.py",
		"/C/Users/24831/Downloads/jujiatong.plist",
		"/C/Users/24831/Desktop/测试内容及问题/12.5.txt",
		"/E/test/loggings/10-31-18-12-3_test.log",
		"/E/Rf_test/test.robot",
		"/E/Rf_test/test_if.robot"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\\",
			"{\n\"python_interpreter",
			"{\n\"python_interpreter\": \"C:/Users/24831/AppData/Local/Programs/Python/Python36/python.exe\",\n\"suppress_word_completions\": true,\n\"suppress_explicit_completions\": true,\n\"complete_parameters\": true,\n}",
			"\\",
			"order",
			"order-temporary"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"/",
			"order"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "operation_excle.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1643,
						"regions":
						{
						},
						"selection":
						[
							[
								239,
								239
							]
						],
						"settings":
						{
							"SL.14.region_keys":
							[
							],
							"SL.16.region_keys":
							[
							],
							"SL.27.region_keys":
							[
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"incomplete_sync": null,
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/24831/Desktop/TXT/测试内容及问题/货鼠岱嘀小程序12.17.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 566,
						"regions":
						{
						},
						"selection":
						[
							[
								566,
								566
							]
						],
						"settings":
						{
							"SL.14.region_keys":
							[
							],
							"SL.15.region_keys":
							[
							],
							"auto_name": "货鼠岱嘀小程序：",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"incomplete_sync": null,
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3121,
						"regions":
						{
						},
						"selection":
						[
							[
								14,
								14
							]
						],
						"settings":
						{
							"SL.13.region_keys":
							[
							],
							"SL.14.region_keys":
							[
							],
							"auto_name": "袋鼠打车下单：",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"incomplete_sync": null,
							"is_init_dirty_state": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "main/run_test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3479,
						"regions":
						{
						},
						"selection":
						[
							[
								2882,
								2882
							]
						],
						"settings":
						{
							"SL.149.region_keys":
							[
								"SL.pep8.Highlights.|a3c38c0f6ec558c33bc369292b1d0c117562c5e165f62ced6e69725b611ed763|region.redish markup.error.sublime_linter|32",
								"SL.pep8.Gutter.|region.redish markup.error.sublime_linter|dot",
								"SL.pep8.Highlights.|3b3deae4ce9f5696b66807517775933b7b8de5ea6b6faa9e7adc3fabd4e28174|region.redish markup.error.sublime_linter|32",
								"sublime_linter.protected_regions",
								"SL.pep8.Highlights.|49b6e811dd239344ec447275042a3685f268904d10a425dce0400caac4387205|region.redish markup.error.sublime_linter|32",
								"SL.pep8.Highlights.|d1973725ddb64abc4d16190c84fd62fb2f463c266062991da13ab04c3b1776e8|region.redish markup.error.sublime_linter|32",
								"SL.pep8.Highlights.|6aafb8abf17de46aaea4edecccf58ef51395d8593d1987036b7d3a7d31639053|region.redish markup.error.sublime_linter|32"
							],
							"SL.17.region_keys":
							[
								"SL.pep8.Highlights.|6aafb8abf17de46aaea4edecccf58ef51395d8593d1987036b7d3a7d31639053|region.redish markup.error.sublime_linter|32",
								"SL.pep8.Highlights.|a3c38c0f6ec558c33bc369292b1d0c117562c5e165f62ced6e69725b611ed763|region.redish markup.error.sublime_linter|32",
								"SL.pep8.Highlights.|3b3deae4ce9f5696b66807517775933b7b8de5ea6b6faa9e7adc3fabd4e28174|region.redish markup.error.sublime_linter|32",
								"SL.pep8.Highlights.|49b6e811dd239344ec447275042a3685f268904d10a425dce0400caac4387205|region.redish markup.error.sublime_linter|32",
								"SL.pep8.Highlights.|d1973725ddb64abc4d16190c84fd62fb2f463c266062991da13ab04c3b1776e8|region.redish markup.error.sublime_linter|32",
								"sublime_linter.protected_regions",
								"SL.pep8.Gutter.|region.redish markup.error.sublime_linter|dot"
							],
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"incomplete_sync": null,
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 126.0
	},
	"pinned_build_system": "Packages/User/python3.6.5.sublime-build",
	"project": "interfaceTest.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 374.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 430.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 289.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
